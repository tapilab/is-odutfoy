season dates :
14-15 : 28 OCT - 15 APR
13-14 : 29 OCT - 16 APR
12-13 : 30 OCT - 17 APR

10-11 : 26 OCT - 13 APR
09-10 : 27 OCT - 14 APR
08-09 : 28 OCT - 15 APR
07-08 : 30 OCT - 16 APR
06-07 : 31 OCT - 18 APR
05-06 : 1 NOV - 19 APR


look at model, see which features are important :
Some seem much much more important than others, some redundance, exactly same coeffs for some features.
To investigate.

get rid of some players?

create new features per position

Features :
0 : MIN : (minutes played)
1 : FGM (field goals made)
2 : FGA (field goals attempted)
3 : FG_PCT (field goals %)
4 : FG3M (3 pointers made)
5 : FG3A (3 pointers attempted)
6 : FG3_PCT (3 pointers %)
7 : FTM (free throws made)
8 : FTA (free throws attempted)
9 : FT_PCT (free throws %)
10 : OREB (offensive rebound)
11 : DREB (defensive rebound)
12 : REB (rebounds)
13 : AST (assists)
14 : STL (Steals)
15 : BLK (blocks)
16 : TOV (turnovers)
17 : PF (personal fouls)
18 : PTS (points)
19 : +/- (score diff while on the field)
20 : winrate
21 : experience
22 : age
23 : height
24 : weight
25 : game number


4=7=-18 (sometimes sign inversed)
10=11=-12

data averages names:
baseline.txt
slide_X
slide_loc_X
slide_N_X (N being number of last games included)
slide_loc_N_X
slide_pos_X
slide_loc_pos_X
slide_pos_NX
slide_loc_pos_N_X

raw_X (obsolete)
sliding_X (obsolete)
sliding_loc (obsolete)


See mails for questions:
Smart way of reimplementing average order? do start end

function as arguments? or model object directly.

check panda

For position, do average until game or overall?
Should I save feature matrices?

Positions :
['Center', 'Forward', 'Center-Forward', 'Guard', 'Forward-Guard', 'Forward-Center', 'Guard-Forward']

dictvectorizer
coeffs
scatterplot

plotting error as season goes on : append number of games played? wouldn't that be a bad feature?
starting mid season!

polynomial features : too long
SVM : too long /try with parameters
NR

Experts

pre draft + head to head and trading. (reddit? ) buy/Sell
Unit Tests
Simulate Season


